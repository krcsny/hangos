{
  "version": 3,
  "file": "server.js",
  "sourceRoot": "",
  "sources": [
    "server.coffee"
  ],
  "names": [],
  "mappings": ";AAAA,IAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA,aAAA,EAAA,UAAA,EAAA,IAAA,EAAA,OAAA,EAAA,EAAA,EAAA,MAAA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,UAAA,EAAA,QAAA,EAAA,MAAA,EAAA,IAAA,EAAA,KAAA,EAAA;;AAAA,EAAA,GAAK,OAAA,CAAQ,IAAR;;AACL,EAAA,GAAK,OAAA,CAAQ,IAAR;;AACL,CAAA,GAAI,OAAA,CAAQ,QAAR;;AACJ,OAAA,GAAU,OAAA,CAAQ,SAAR,EAHV;;;AAKA,GAAA,GAAM,OAAA,CAAA;;AACN,GAAA,GAAM,OAAA,CAAQ,KAAR;;AACN,IAAA,GAAO,OAAA,CAAQ,MAAR,CAAe,CAAC,MAAhB,CAAuB,GAAvB;;AACP,EAAA,GAAK,OAAA,CAAQ,WAAR,CAAA,CAAqB,IAArB;;AACL,IAAA,GAAO,OAAO,CAAC,GAAG,CAAC,IAAZ,IAAoB;;AAC3B,CAAA,CAAC,KAAD,CAAA,GAAU,OAAA,CAAQ,eAAR,CAAV;;AACA,CAAA,CAAC,IAAD,CAAA,GAAS,OAAA,CAAQ,eAAR,CAAT;;AAEA,GAAG,CAAC,GAAJ,CAAQ,OAAO,CAAC,MAAR,CAAe,SAAA,GAAY,GAA3B,CAAR;;AACA,IAAI,CAAC,MAAL,CAAY,IAAZ,EAAkB,QAAA,CAAA,CAAA;SAAM,OAAO,CAAC,GAAR,CAAY,CAAA,aAAA,CAAA,CAAgB,IAAhB,CAAA,CAAZ;AAAN,CAAlB;;AAEA,IAAA,GACE;EAAA,MAAA,EAAS,KAAT;EACA,EAAA,EAAK;AADL;;AAGF,QAAA,GAAW,KAAA,CACT,aADS,EAET,CAAC,IAAD,EAAO,MAAP,CAFS;;AAKX,UAAA,GAAa,QAAA,CAAC,CAAD,CAAA;AACX,MAAA;EAAA,aAAA,GAAgB,CAAC,CAAC,QAAF,CAAA,CAAY,CAAC,KAAb,CAAmB,oBAAnB,CAAyC,CAAA,CAAA;EACzD,OAAO,CAAC,GAAR,CAAY,aAAZ;SACA,EAAE,CAAC,IAAH,CAAQ,eAAR,EAAyB,aAAzB;AAHW;;AAKb,QAAQ,CAAC,MAAM,CAAC,EAAhB,CAAmB,MAAnB,EAA2B,UAA3B;;AAEA,MAAA,GAAS,QAAA,CAAC,EAAD,CAAA;EACP,IAAA,GAAO;IAAA,MAAA,EAAS,IAAT;IAAe,EAAA,EAAK;EAApB;EACP,IAAA,CAAK,4BAAL;SACA,EAAE,CAAC,IAAH,CAAQ,QAAR;AAHO,EAhCT;;;AAsCA,MAAA,GAAS,QAAA,CAAC,MAAD,CAAA;EACP,IAAA,GAAO;IAAA,MAAA,EAAS,KAAT;IAAgB,EAAA,EAAK;EAArB;EACP,IAAG,CAAI,MAAP;IACE,EAAE,CAAC,IAAH,CAAQ,QAAR;WACA,IAAA,CAAK,4BAAL,EAFF;;AAFO,EAtCT;;;AA6CA,aAAA,GAAgB,QAAA,CAAA,CAAA;SACd,IAAA,CACE,sCADF,EAEE,QAAA,CAAC,GAAD,EAAM,MAAN,EAAc,MAAd,CAAA;AACE,QAAA,CAAA,EAAA;IAAA,IAAG,GAAH;aACE,OAAO,CAAC,GAAR,CAAY,GAAZ,EADF;KAAA,MAAA;MAGE,CAAA,GAAI,QAAA,CAAS,MAAM,CAAC,KAAP,CAAa,wBAAb,CAAuC,CAAA,CAAA,CAAhD;MACJ,IAAG,CAAA,KAAK,CAAR;QACE,IAAG,IAAI,CAAC,MAAR;iBAAoB,MAAA,CAAA,EAApB;SADF;OAAA,MAAA;QAGE,MAAA,GAAS,MAAM,CAAC,KAAP,CAAa,iCAAb,CAAgD,CAAA,CAAA;QACzD,IAAG,IAAI,CAAC,MAAR;UACE,IAAG,MAAA,KAAY,IAAI,CAAC,EAApB;;mBAEE,MAAA,CAAO,MAAP,EAFF;WADF;SAAA,MAAA;iBAKE,MAAA,CAAO,MAAP,EALF;SAJF;OAJF;;EADF,CAFF;AADc;;AAoBhB,WAAA,CAAY,aAAZ,EAA2B,IAA3B;;AAGA,UAAA,GAAa,QAAA,CAAC,MAAD,CAAA;EACX,OAAO,CAAC,GAAR,CAAY,MAAM,CAAC,EAAP,GAAY,UAAxB;EACA,MAAM,CAAC,EAAP,CAAU,SAAV,EAAqB,QAAA,CAAC,OAAD,CAAA;WACnB,OAAO,CAAC,GAAR,CAAY,OAAZ;EADmB,CAArB,EADA;;EAKA,MAAM,CAAC,EAAP,CAAU,QAAV,EAAoB,QAAA,CAAA,CAAA;IAClB,OAAO,CAAC,GAAR,CAAY,yBAAZ;WACA,MAAA,CAAO,IAAP;EAFkB,CAApB,EALA;;EAUA,MAAM,CAAC,EAAP,CAAU,YAAV,EAAwB,QAAA,CAAA,CAAA;WACtB,OAAO,CAAC,GAAR,CAAY,MAAM,CAAC,EAAP,GAAY,QAAxB;EADsB,CAAxB;SAGA,MAAM,CAAC,EAAP,CAAU,OAAV,EAAmB,QAAA,CAAC,CAAD,CAAA;WAAO,MAAM,CAAC,UAAP,CAAA;EAAP,CAAnB;AAdW;;AAgBb,EAAE,CAAC,EAAH,CAAM,YAAN,EAAoB,UAApB;;AApFA",
  "sourcesContent": [
    "fs = require 'fs'\nip = require 'ip'\n_ = require 'lodash'\nexpress = require 'express'\n# config = require(\"./config.js\")\napp = express()\nurl = require 'url'\nhttp = require('http').Server(app)\nio = require('socket.io')(http)\nport = process.env.PORT || 8080\n{spawn} = require('child_process')\n{exec} = require 'child_process'\n\napp.use(express.static(__dirname + \"/\"))\nhttp.listen(port, () -> console.log(\"-> localhost:#{port}\"))\n\ncall = \n  online : false\n  id : null\n\nmultimon = spawn(\n  'multimon-ng', \n  ['-a', 'DTMF']\n)\n\nlistenDTMF = (d) ->\n  incomingDigit = d.toString().match(/(?<=DTMF:\\s)(.*)/gm)[0]\n  console.log incomingDigit\n  io.emit \"incomingDigit\", incomingDigit\n\nmultimon.stdout.on \"data\", listenDTMF\n\npickup = (id) ->\n  call = online : true, id : id\n  exec('adb shell input keyevent 5')\n  io.emit \"pickup\"\n  #SAVE CALLER\n\nhangup = (socket) ->\n  call = online : false, id : null\n  if not socket\n    io.emit \"hangup\"\n    exec('adb shell input keyevent 6')\n  #SAVE CALLER\n\ncheckIncoming = () ->\n  exec(\n    'adb shell dumpsys telephony.registry', \n    (err, stdout, stderr) ->\n      if err\n        console.log err\n      else \n        c = parseInt stdout.match(/(?<=mCallState=)(.*)/gm)[0]\n        if c is 0\n          if call.online then hangup()\n        else\n          caller = stdout.match(/(?<=mCallIncomingNumber=)(.*)/gm)[0]\n          if call.online\n            if caller isnt call.id\n              # hangup true\n              pickup(caller)\n          else\n            pickup(caller)\n  )\n\nsetInterval(checkIncoming, 1000)\n\n\nconnection = (socket) ->\n  console.log socket.id + \" joined.\"\n  socket.on(\"history\", (history) ->\n    console.log history\n    # io.emit(\"welcome\", 42)\n  )\n  socket.on(\"hangup\", () ->\n    console.log \"solvator forced to quit\"\n    hangup true\n    # io.emit(\"welcome\", 42)\n  )\n  socket.on('disconnect', () ->\n    console.log socket.id + \" left.\"\n  )\n  socket.on('leave', (t) -> socket.disconnect())\n\nio.on('connection', connection )\n\n\n###\nTODO\nhandle idle kick\n###\n"
  ]
}